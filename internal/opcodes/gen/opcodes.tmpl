package opcodes

import (
	"errors"
	"fmt"
	"io"

	"github.com/vsinha/vm/internal/vm"
)

var ErrNoOpCode = errors.New("no opcode with that address exists")

// TODO this has problems because many of the opcodes have the same mnemonic,
// so we have to think about how to disambiguate them or if we even want to
type Op int

type OpCode interface {
	Execute(*vm.VM) 
}

{{define "opcodeTypeStruct" }}
{{range $key, $value := .}}
type {{.ExtendedMnemonic}} struct {
	operand1 string
	operand2 string
}

func (o *{{.ExtendedMnemonic}}) Execute(v *vm.VM) {
}

func (o *{{.ExtendedMnemonic}}) String() string {
	return "{{.Mnemonic}}{{if .Operand1}} {{.Operand1}}{{end}}{{if .Operand2}} {{.Operand2}}{{end}}"
}
{{end}}
{{end}}

{{template "opcodeTypeStruct" .Unprefixed}}
{{template "opcodeTypeStruct" .CBPrefixed}}

{{define "readOneByte"}}
	s, err = readBytesAsString(data, 1)
	if err != nil {
		return nil, fmt.Errorf("useful error message: %v", err)
	}
{{end}}
{{define "readTwoBytes"}}
	s, err = readBytesAsString(data, 2)
	if err != nil {
		return nil, fmt.Errorf("useful error message: %v", err)
	}
{{end}}
{{define "handleOperand"}}
	{{ if eq . "a8" }} {{ template "readOneByte" . }}
	{{ else if eq . "d8" }} {{ template "readOneByte" . }}
	{{ else if eq . "a16" }} {{ template "readTwoBytes" . }}
	{{ else if eq . "d16" }} {{ template "readTwoBytes" . }}
	{{ else if eq . "(HL)" }} {{ template "readTwoBytes" . }}
	{{ else if eq . "(HL-)" }} {{ template "readTwoBytes" . }}
	{{ else if eq . "(HL+)" }} {{ template "readTwoBytes" . }}
	{{ else }} s = "{{ . }}"
	{{- end }}
{{end}}

// ReadOpCode returns an executable opcode by taking an io.Reader
// and reading a single instruction off it. If there is no more data
// returns undelying io.Reader's EOF error type.
func ReadOpCode(data io.Reader) (OpCode, error) {
	d, err := readByte(data)
	if err != nil {
		return nil, err
	}

	switch d[0] {
	{{ range $key, $value := .Unprefixed }}
	case {{$value.Addr}}: // {{$value.Addr}} - {{$value.Mnemonic}}
		o := &{{$value.ExtendedMnemonic}}{}

		var s string
		{{- template "handleOperand" .RawOperand1 -}}
		o.operand1 = s
		{{- template "handleOperand" .RawOperand2 -}}
		o.operand2 = s

		return o, nil
	{{ end }}
	default:
		return nil, fmt.Errorf("the proposed opcode (dec %d, hex %x) doesn't exist: %v", d[0], d[0], ErrNoOpCode)
	}
}