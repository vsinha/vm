package opcodes

import (
	"errors"
	"fmt"
	"io"
)

// ErrNoOpCode is a little alias for the error message returned below
var ErrNoOpCode = errors.New("no opcode with that address exists")

// TODO this has problems because many of the opcodes have the same mnemonic,
// so we have to think about how to disambiguate them or if we even want to
type Op int

{{define "opcodeTypeStruct" }}
{{range $key, $value := .}}
type {{.ExtendedMnemonic}} struct {
	addr string // {{ .Addr }}
	operand1 interface{} // literal, or reg name, or (HL)...
	operand2 interface{} // same
	isCbPrefixed bool
}

func (o *{{.ExtendedMnemonic}}) Write(w io.Writer) (int, error) { // {{.Addr}}
	var b []byte

	b = append(b, {{.Addr}})

	var v int64
	_ = v // suppress unused variable warning in the case we have no operands 

	written, err := w.Write([]byte{ 
		{{ if .CBPrefixed }} 0xCB, {{end}}
		{{.Addr}},
	})
	if err != nil {
		return written, err
	}

	{{handleWriteByteOperand . 1}}
	{{handleWriteByteOperand . 2}}

	return written, err
}

func (o *{{.ExtendedMnemonic}}) Length() uint8 { // {{.Addr}}
	return {{.Length}} 
}

func (o *{{.ExtendedMnemonic}}) cycles() []uint8 { // {{.Addr}}
	return []uint8{ {{ range $key, $value := .Cycles }} {{$value}}, {{end}} }
}

func (o *{{.ExtendedMnemonic}}) String() string { // {{.Addr}}
	return "{{.Mnemonic}}" {{- if .Operand1 }} + " " + {{handleStringOfOperand . 1}} {{ end }} {{- if .Operand2 }} + " " + {{handleStringOfOperand . 2}} {{end}}
}

func (o *{{.ExtendedMnemonic}}) SymbolicString() string { // {{.Addr}}
	return "{{.Mnemonic}}{{if .Operand1}} {{.RawOperand1}}{{end}}{{if .Operand2}},{{.RawOperand2}}{{end}}"
}

{{end}}
{{end}}

{{template "opcodeTypeStruct" .Unprefixed}}
{{template "opcodeTypeStruct" .CBPrefixed}}

{{define "readInstruction"}}
	d := make([]byte, 1)
	_, err := data.Read(d)
	if err != nil {
		return nil, err
	}
	switch d[0] {
	{{ range $key, $value := .}}
	case {{$value.Addr}}: // {{$value.Addr}} - {{$value.Mnemonic}}
		{{- if eq $value.Mnemonic "PREFIX"}} 
			return read{{$value.RawOperand1}}PrefixedInstruction(data)
		{{- else}}
			o := &{{$value.ExtendedMnemonic}}{}

			{
				{{ handleReadOperand . 1 }}
				if err != nil {
					return nil, err
				}
				o.operand1 = s
			}
			{
				{{ handleReadOperand . 2 }}
				if err != nil {
					return nil, err
				}
				o.operand2 = s
			}

			return o, nil
		{{end}}
	{{ end }}

	default:
		return nil, fmt.Errorf("the proposed opcode (dec %d, hex %x) doesn't exist: %v", d[0], d[0], ErrNoOpCode)
	}
{{ end }}

// ReadOpCode returns an executable opcode by taking an io.Reader
// and reading a single instruction off it. If there is no more data
// returns undelying io.Reader's EOF error type.
func ReadInstruction(data io.Reader) (Instruction, error) {
{{template "readInstruction" .Unprefixed}}
}

func readCBPrefixedInstruction(data io.Reader) (Instruction, error) {
{{template "readInstruction" .CBPrefixed}}
}